Q1. What is Emmet?
Ans. Emmet is a web development toolkit that allows developers to write 
HTML and CSS code quickly and efficiently using abbreviations and shortcuts.
For example, we can use ul>li*5, now this will give us unordered list with
five list items in it.

Q2. Difference between Framework and Library?
Ans. Library:
A library is a collection of pre-written code that you can use in your program by invoking its functions or methods.
It typically consists of a set of functions, routines, or classes that you can use to perform specific tasks without having to write that code yourself.
In a library, you have more control over the flow of your program. You call the library when and where you need it.
Examples of libraries include jQuery (JavaScript library), NumPy (Python library for numerical computing), or Apache Commons (Java library with reusable Java components).

Framework:
A framework is a more comprehensive architecture that provides a structure and guidelines for building an entire application.
It often includes libraries but also dictates the overall design of your application. In a framework, the flow of control is inverted - instead of calling your code, the framework calls your code.
Frameworks provide a skeleton where you fill in the details. They impose a certain structure on your application and often follow the "Don't call us, we'll call you" principle.
Examples of frameworks include Ruby on Rails (a web application framework for Ruby), Django (a web framework for Python), or Spring (a Java framework for enterprise applications).

Q3. What is CDN? Why we use it?
CDN stands for Content Delivery Network. It is a network of servers distributed across various geographic locations to deliver web content more efficiently to users. The primary purpose of using a CDN is to improve the performance, speed, and reliability of delivering web content, such as images, scripts, stylesheets, and other static assets, to end-users.

Here's why CDNs are used:

Faster Content Delivery:
CDNs have servers strategically located around the world. When a user requests a piece of content, the CDN serves it from the server closest to the user's geographical location.
This reduces latency and results in faster loading times for web pages. Users experience quicker access to content, leading to a better overall user experience.

Load Distribution:
CDNs distribute the load of delivering content across multiple servers. This helps in preventing any single server from becoming overwhelmed with too many requests.
By distributing the load, CDNs contribute to improved scalability and reliability of web applications, particularly during traffic spikes or high-demand periods.

Reduction of Server Load:
Offloading static content to CDNs reduces the load on the origin server (the server where your website is hosted). The origin server can then focus on processing dynamic content, databases, and other resource-intensive tasks.

Caching:
CDNs use caching mechanisms to store copies of static content on their servers. When a user requests a piece of content that has been previously accessed, the CDN can serve the cached version without having to retrieve it from the origin server.
Caching reduces the time and resources required to load content, contributing to faster page loading times.

Distributed Security:
CDNs often include security features, such as DDoS protection and Web Application Firewalls (WAF), to help mitigate and handle security threats. The distributed nature of CDNs makes it harder for attackers to target a single server.

Cost Savings:
Using a CDN can lead to cost savings for website owners. Since CDNs optimize content delivery and reduce the load on origin servers, there may be a decrease in bandwidth and server infrastructure costs.

Q4. Why React is called React ?
Ans. React, the JavaScript library for building user interfaces, was developed by Facebook. The name "React" reflects the core philosophy of how the library operates.
React is focused on providing a reactive programming model. In reactive programming, the user interface reacts to changes in the underlying data. When data changes, React efficiently updates and re-renders only the components affected by those changes, rather than re-rendering the entire page. This reactive approach leads to a more efficient and performant user interface.

Q5. What is cross-origin in script tag?
Ans. The crossorigin attribute is used in the <script> tag when you are including external scripts (JavaScript files) from a different domain, and you want to control how the browser handles cross-origin requests for that script. Cross-origin requests refer to requests for resources (like scripts, stylesheets, or images) that come from a different domain than the one that served the web page.

Q6. What is difference between React and ReactDOM ?
Ans. In React, React and ReactDOM are two separate packages that serve distinct purposes.

React:
The react package is the core library for building user interfaces using React. It provides the fundamental features of React, including components, JSX syntax, and the virtual DOM (Document Object Model).
When you write React components, use JSX, or work with the core concepts of React like state and props, you are using functionality provided by the react package.

ReactDOM:
The react-dom package is responsible for rendering React components in the DOM (Document Object Model). It provides the methods needed to mount React components into the browser, update them, and handle events.
ReactDOM.render() is a crucial method from the react-dom package that is used to render a React element into the DOM. It takes a React element and a target DOM container as arguments.

Q7. What is difference between react.developement.js and react.production.js files via CDN ?
Ans. When you include React via a CDN (Content Delivery Network), you may notice that there are two versions of the library available: react.development.js and react.production.js. These files serve different purposes based on the environment in which your application is running:

react.development.js:
This is the development version of the React library.
It is larger in file size compared to the production version.
It includes additional warnings and debugging information in the console, which can be helpful for developers during the development and debugging process.
The development version provides more informative error messages and warnings, making it easier to identify and fix issues during development.

react.production.js:
This is the production version of the React library.
It is optimized for performance and is smaller in file size compared to the development version.
It omits development-specific warnings and error messages to reduce the payload size sent to the client, improving the application's runtime performance.
It is recommended to use the production version in a production environment to achieve better performance.

Q8. What are async and defer ?
Ans. async and defer are attributes used in the <script> tag in HTML to control the way scripts are executed. They are particularly useful when including external JavaScript files in your HTML document.

async:
When you add the async attribute to a script tag, it indicates that the script should be executed asynchronously.
An asynchronous script doesn't block the parsing of the HTML document. The script will be fetched in the background while the HTML parsing continues, and once the script is fetched, it will be executed without waiting for the HTML parsing to complete.
This is beneficial for scripts that don't depend on the DOM structure and can run independently. Keep in mind that the order of execution may not be guaranteed, especially when multiple scripts are marked as async.

defer:
When you add the defer attribute to a script tag, it indicates that the script should be executed after the HTML document has been fully parsed.
Like async, it doesn't block HTML parsing, but it ensures that the script is executed in the order it appears in the document. Multiple deferred scripts will be executed in the order they appear in the HTML.
Deferred scripts are executed in the order they are encountered in the HTML, and they are executed after the HTML parsing is complete but before the DOMContentLoaded event.



